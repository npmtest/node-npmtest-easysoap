{"/home/travis/build/npmtest/node-npmtest-easysoap/test.js":"/* istanbul instrument in package npmtest_easysoap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-easysoap/lib.npmtest_easysoap.js":"/* istanbul instrument in package npmtest_easysoap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_easysoap = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_easysoap = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-easysoap/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-easysoap && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_easysoap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_easysoap\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_easysoap.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_easysoap.rollup.js'] =\n            local.assetsDict['/assets.npmtest_easysoap.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_easysoap.__dirname + '/lib.npmtest_easysoap.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-easysoap/node_modules/easysoap/src/easysoap.js":"(function () {\r\n\r\n    \"use strict\";\r\n\r\n    var _           = require('underscore');\r\n    var wsdlrdr     = require('wsdlrdr');\r\n\r\n    var soapRequest = require('./request/request.js');\r\n\r\n    /**\r\n     * check given params object\r\n     * @param  {[type]} params [description]\r\n     * @return {[type]}        [description]\r\n     */\r\n    function mandatoryCheck(params) {\r\n\r\n        params = params || {};\r\n\r\n        if (params.host === void 0) throw new Error('no host given');\r\n        if (params.path === void 0) throw new Error('no path given');\r\n        if (params.wsdl === void 0) throw new Error('no wsdl path given');\r\n    };\r\n\r\n    /**\r\n     * EasySoap\r\n     * @param {[type]} params [description]\r\n     * @param {[type]} opts   [description]\r\n     */\r\n    var EasySoap = function(params, opts) {\r\n\r\n        params = params || {},\r\n        opts   = opts || {};\r\n\r\n        return {\r\n\r\n            /**\r\n             * call a soap method\r\n             * @param  {[type]} callParams [description]\r\n             * @return {[type]}            [description]\r\n             */\r\n            call: (callParams) => {\r\n\r\n                callParams = callParams || {};\r\n\r\n                if (!callParams.method) {\r\n                    throw new Error('no method given');\r\n                }\r\n\r\n                return soapRequest.soapCall(callParams, params, opts)\r\n                    .then((soapResponse) => {\r\n\r\n                        return wsdlrdr.getMethodParamsByName(callParams.method, params, opts)\r\n                            .then((methodParams) => {\r\n\r\n                                // get xml data as json, try to flatten the output\r\n                                var dataAsJson = wsdlrdr.getXmlDataAsJson(soapResponse.body);\r\n                                if (methodParams.response[0]) {\r\n\r\n                                    if (dataAsJson[methodParams.response[0].name]) {\r\n                                        dataAsJson = dataAsJson[methodParams.response[0].name];\r\n                                    }\r\n                                }\r\n\r\n                                return {\r\n                                    'data'    : dataAsJson,\r\n                                    'response': soapResponse\r\n                                };\r\n                            });\r\n                    });\r\n            },\r\n\r\n            /**\r\n             * [description]\r\n             * @param  {[type]} callParams [description]\r\n             * @return {[type]}            [description]\r\n             */\r\n            getRequestXml: (callParams) => {\r\n\r\n                callParams = callParams || {};\r\n\r\n                if (!callParams.method) {\r\n                    throw new Error('no method given');\r\n                }\r\n\r\n                return soapRequest.getRequestXml(callParams, params, opts);\r\n            },\r\n\r\n\r\n            /**\r\n             * [description]\r\n             * @param  {[type]} xml [description]\r\n             * @return {[type]}     [description]\r\n             */\r\n            getXmlDataAsJson: (xml) => {\r\n                return wsdlrdr.getXmlDataAsJson(xml);\r\n            },\r\n\r\n            /**\r\n             * get all functions from service\r\n             * @return {[type]} [description]\r\n             */\r\n            getAllFunctions: () => {\r\n                return wsdlrdr.getAllFunctions(params, opts);\r\n            },\r\n\r\n            /**\r\n             * get params from service by given methodName\r\n             * @param  {[type]} methodName [description]\r\n             * @return {[type]}            [description]\r\n             */\r\n            getMethodParamsByName: (methodName) => {\r\n                return wsdlrdr.getMethodParamsByName(methodName, params, opts);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * create a new soapClient\r\n     * @param  {[type]} params [description]\r\n     * @param  {[type]} opts   [description]\r\n     * @return {[type]}        [description]\r\n     */\r\n    exports.createClient = function (params, opts) {\r\n\r\n        params = params || {};\r\n        opts   = opts || {};\r\n\r\n        //check if all data is set\r\n        mandatoryCheck(params);\r\n\r\n        if (!opts.secure) {\r\n            opts.secure = false;\r\n        }\r\n\r\n        // fix params and opts\r\n        if (params.host.match('http://')) {\r\n            params.host = params.host.substring(7);\r\n            opts.secure = false;\r\n        }\r\n\r\n        if (params.host.match('https://')) {\r\n            params.host = params.host.substring(8);\r\n            opts.secure = true;\r\n        }\r\n\r\n        return new EasySoap(params, opts);\r\n    };\r\n\r\n})();\r\n","/home/travis/build/npmtest/node-npmtest-easysoap/node_modules/easysoap/src/request/request.js":"(function() {\r\n\r\n    \"use strict\";\r\n\r\n    var that    = module.exports;\r\n\r\n    var fs      = require('fs');\r\n    var path    = require('path');\r\n\r\n    var _       = require('underscore');\r\n    var request = require('request');\r\n    var wsdlrdr = require('wsdlrdr');\r\n\r\n    var requestTpl = _.template(\r\n        fs.readFileSync(__dirname + path.sep + 'request.tpl', 'utf-8')\r\n    );\r\n\r\n    function baseParamsToRequestParams(baseParams) {\r\n\r\n        var requestParams = _.extend({}, baseParams);\r\n\r\n        if (requestParams.headers) {\r\n            if (_.isArray(requestParams.headers)) {\r\n\r\n                requestParams.headers = _.reduce(requestParams.headers,\r\n                    (store, headerItem) => {\r\n                        store[headerItem.name] = headerItem.value;\r\n                        return store;\r\n                    },\r\n                {});\r\n            }\r\n        }\r\n\r\n        return requestParams;\r\n    }\r\n\r\n    function getProtocol(opts) {\r\n\r\n        opts = opts || {};\r\n        if (opts.secure === void 0) {\r\n            opts.secure = false;\r\n        }\r\n\r\n        return (opts.secure) ? 'https://' : 'http://';\r\n    }\r\n\r\n    function getRequestParamsAsString(callParams, baseParams, opts) {\r\n\r\n        var paramTpl = _.template(\r\n            '<<%= namespace %><%= name%><%= attributes%>><%= value%></<%= namespace %><%= name%>>'\r\n        );\r\n\r\n        var getTagAttributes = function(attributes) {\r\n\r\n            return ' ' + _.map(attributes,\r\n                (attributeValue, attributeKey) => {\r\n                    return attributeKey + '=\"' + attributeValue + '\"';\r\n                }\r\n            ).join(' ');\r\n        };\r\n\r\n        var getParamAsString = function(value, name, paramData, attributes) {\r\n\r\n            paramData = paramData || {};\r\n\r\n            var namespace = '';\r\n            if (paramData) {\r\n                if (paramData.namespace) {\r\n                    namespace = paramData.namespace + ':';\r\n                }\r\n            }\r\n\r\n            // get underline parameter values\r\n            var attributesString = '';\r\n            if (_.isObject(value)) {\r\n\r\n                if (value._attributes) {\r\n                    attributesString = getTagAttributes(value._attributes);\r\n                }\r\n\r\n                if (value._value) {\r\n                    value = value._value;\r\n                }\r\n            }\r\n\r\n            // array value given, then create item for every value\r\n            if (_.isArray(value)) {\r\n                return _.map(value,\r\n                    (valueItem) => getParamAsString(valueItem, name, paramData, attributes)\r\n                ).join('');\r\n            }\r\n\r\n            // object value given, create a string for object\r\n            if (_.isObject(value)) {\r\n\r\n                var valueAsString = _.map(value,\r\n                    (valueItem, valueKey) => {\r\n\r\n                        if (_.isObject(valueItem)) {\r\n                            var valueItem = _.map(valueItem, (valueItemItem, valueKeyKey) => {\r\n                                return getParamAsString(valueItemItem, valueKeyKey, paramData[name], attributes);\r\n                            }).join('');\r\n                        }\r\n\r\n                        return getParamAsString(valueItem, valueKey, paramData[name], attributes);\r\n                    }\r\n                ).join('');\r\n\r\n                return getParamAsString(valueAsString, name, paramData, attributes);\r\n\r\n            }\r\n\r\n            // add global attributes\r\n            if (attributes) {\r\n                attributesString += getTagAttributes(attributes);\r\n            }\r\n\r\n            // simple value given\r\n            return paramTpl({\r\n                'namespace' : namespace,\r\n                'name'      : name,\r\n                'attributes': attributesString,\r\n                'value'     : value\r\n            });\r\n        };\r\n\r\n        return wsdlrdr.getMethodParamsByName(callParams.method, baseParamsToRequestParams(baseParams), opts)\r\n            .then((methodParams) => {\r\n\r\n                var requestParams = methodParams.request;\r\n\r\n                if (!callParams.params.hasOwnProperty(callParams.method)) {\r\n                    var topObject = {};\r\n                        topObject[callParams.method] = callParams.params;\r\n\r\n                    callParams.params = topObject;\r\n                }\r\n\r\n                var result = _.map(callParams.params,\r\n                    (paramValue, paramName) => {\r\n\r\n                        var methodRequestParams = _.findWhere(requestParams, { 'element': paramName });\r\n                        if (!methodRequestParams) {\r\n                            methodRequestParams = _.findWhere(requestParams, { 'name': paramName });\r\n                        }\r\n\r\n                        return getParamAsString(paramValue, paramName,\r\n                            methodRequestParams,\r\n                            callParams.attributes\r\n                        );\r\n                    }\r\n                );\r\n\r\n                return result.join('');\r\n            });\r\n    }\r\n\r\n    function getRequestEnvelopeParams(params, opts) {\r\n\r\n        return wsdlrdr.getNamespaces(params, opts)\r\n            .then((namespaces) => {\r\n\r\n                namespaces = _.filter(namespaces,\r\n                    (namespaceObj) => {\r\n                        return namespaceObj.short !== 'xmlns';\r\n                    }\r\n                );\r\n\r\n                // add custom namespaces\r\n                if (params.headers !== void 0) {\r\n                    _.each(params.headers, function(headerItem, index) {\r\n\r\n                        var full = headerItem.namespace || headerItem.value;\r\n                        namespaces.push({\r\n                            'short': 'cns' + index,\r\n                            'full' : full\r\n                        });\r\n                    });\r\n                }\r\n\r\n                var soap = _.findWhere(namespaces, { 'short': 'soap' });\r\n                var xsd  = _.findWhere(namespaces, { 'short': 'xsd' }) || {};\r\n\r\n                return {\r\n                    'soap_env'  : 'http://schemas.xmlsoap.org/soap/envelope/',\r\n                    'xml_schema': xsd.full || 'http://www.w3.org/2001/XMLSchema',\r\n                    'namespaces': namespaces\r\n                }\r\n            });\r\n    }\r\n\r\n    function getRequestHeadParams(params) {\r\n\r\n        params = params || {};\r\n\r\n        if (!params.headers) {\r\n            return null;\r\n        }\r\n\r\n        var headerTpl = _.template(\"<cns<%= index%>:<%= name%>><%= value%></cns<%= index%>:<%= name%>>\");\r\n\r\n        if (!_.isArray(params.headers) &&\r\n            _.isObject(params.headers)) {\r\n\r\n            var keyName = _.keys(params.headers)[0];\r\n\r\n            params.headers = [{\r\n                name : keyName,\r\n                value: params.headers[keyName]\r\n            }];\r\n        }\r\n\r\n        return _.map(params.headers, (headerItem, headerIndex) => {\r\n            return headerTpl(\r\n                _.extend(headerItem, {\r\n                    index: headerIndex\r\n                })\r\n            );\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * [getRequestXml description]\r\n     * @param  {[type]} callParams [description]\r\n     * @param  {[type]} params     [description]\r\n     * @param  {[type]} opts       [description]\r\n     * @return {[type]}            [description]\r\n     */\r\n    that.getRequestXml = (callParams, params, opts) => {\r\n\r\n        var reqHeadParams   = getRequestHeadParams(_.extend(params, callParams));\r\n        var reqEnvParams    = getRequestEnvelopeParams(_.extend(params, callParams), opts);\r\n        var reqParamsString = getRequestParamsAsString(callParams, params, opts);\r\n\r\n        return Promise.all([reqEnvParams, reqParamsString])\r\n            .then((reqParams) => {\r\n\r\n                var envParams       = reqParams[0];\r\n                var reqParamsString = reqParams[1];\r\n\r\n                return requestTpl({\r\n                    'envelope': envParams,\r\n                    'head'    : reqHeadParams,\r\n                    'body'    : reqParamsString\r\n                });\r\n            });\r\n    };\r\n\r\n    /**\r\n     * [soapCall description]\r\n     * @param  {[type]} callParams [description]\r\n     * @param  {[type]} params     [description]\r\n     * @param  {[type]} opts       [description]\r\n     * @return {[type]}            [description]\r\n     */\r\n    that.soapCall = (callParams, params, opts) => {\r\n\r\n        return that.getRequestXml(callParams, params, opts)\r\n            .then((requestXml) => {\r\n\r\n                // default headers\r\n                var headers = {}\r\n                    headers['Content-Type'] = 'text/xml; charset=utf-8';\r\n\r\n                // custom headers\r\n                _.each(params.headers, (headerItem) => {\r\n                    headers[headerItem.name] = headerItem.value\r\n                });\r\n\r\n                return new Promise((resolve, reject) => {\r\n                    request({\r\n                        url               : getProtocol(opts) + params.host + params.path,\r\n                        body              : requestXml,\r\n                        headers           : headers,\r\n                        rejectUnauthorized: params.rejectUnauthorized,\r\n                        method            : 'POST'\r\n                    }, function(error, response, body) {\r\n                        if (error) { reject(error); }\r\n                        else {\r\n                            resolve({\r\n                                'body'    : body,\r\n                                'response': response,\r\n                                'header'  : response.headers\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n    };\r\n\r\n})();\r\n"}